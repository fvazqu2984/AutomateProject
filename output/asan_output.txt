=================================================================
==11804==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x00016d4d324a at pc 0x0001031d1370 bp 0x00016d4d3210 sp 0x00016d4d29c0
WRITE of size 18 at 0x00016d4d324a thread T0
    #0 0x1031d136c in wrap_strcpy+0x510 (libclang_rt.asan_osx_dynamic.dylib:arm64e+0x4d36c)
    #1 0x10292fa10 in process_data+0x17c (a.out:arm64+0x100003a10)
    #2 0x10292fc1c in main+0x18 (a.out:arm64+0x100003c1c)
    #3 0x184a760dc  (<unknown module>)

Address 0x00016d4d324a is located in stack of thread T0 at offset 42 in frame
    #0 0x10292f8a0 in process_data+0xc (a.out:arm64+0x1000038a0)

  This frame has 2 object(s):
    [32, 42) 'buffer' <== Memory access at offset 42 overflows this variable
    [64, 84) 'input'
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow (libclang_rt.asan_osx_dynamic.dylib:arm64e+0x4d36c) in wrap_strcpy+0x510
Shadow bytes around the buggy address:
  0x00016d4d2f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00016d4d3000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00016d4d3080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00016d4d3100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00016d4d3180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x00016d4d3200: 00 00 00 00 f1 f1 f1 f1 00[02]f2 f2 00 00 04 f3
  0x00016d4d3280: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x00016d4d3300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00016d4d3380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00016d4d3400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00016d4d3480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==11804==ABORTING
